var app = angular.module('mainModule', ['ngRoute', 'isteven-multi-select']);
var mainModule = angular.module("mainModule");

mainModule.factory('configService',["$http", function ($http) {
    var server = "";
    var port = "8080";
    var getConfigurationMethod = "/Api/getConfiguration/";

    var urlParams = [];
    urlParams.push(
      "http://",
      server,
      ":",
      port
    );
    var url = urlParams.join("");

    function getConfiguration() {
        var config = [];
        var promise = $http.get(url + getConfigurationMethod).
          then(function (response) {
              // this callback will be called asynchronously on success
              config = response.data;
              return config;
          });
        return promise;
    }

    // expose a public API
    return {
        getConfiguration: getConfiguration
    };
}]);
var app = angular.module('mainModule');

app.filter('daysFilter', function () {
    return function (input) {
        return input == '1' ? 'Today' : 'Last ' + input + ' days';
    };
});

app.filter('capitalCaseToSpace', function () {
    return function (input) {
        return input.replace(/([a-z])([A-Z])/g, '$1 $2');
    };
});
var app = angular.module('mainModule');

app.controller('mainCtrl', ['$scope', 'configService',
    function ($scope, configService) {
        $scope.itemId = '';
        $scope.items = [];
        $scope.queryString = '';
        $scope.queryDays = [1, 3, 7, 999];
        $scope.queryDay = $scope.queryDays[0];
        $scope.sortingField = '';
        var sortingDirection = 'ascending';
        var statusFieldHeader = 'Status';
        var dateFieldHeader = 'Date';
        $scope.UidFieldHeader = 'Uid';
        $scope.selectedStatusList = [];
        $scope.itemsHeaders = [];

        // Checking if $scope.$apply is needed before performing it
        $scope.safeApply = function (fn) {
            var phase = this.$root.$$phase;
            if (phase == '$apply' || phase == '$digest') {
                if (fn && (typeof (fn) === 'function')) {
                    fn();
                }
            } else {
                this.$apply(fn);
            }
        };

        var getConfiguration = function () {
            $scope.safeApply(function () {
                $scope.queryDays = [1, 3, 7, 999];
                $scope.queryDay = $scope.queryDays[0];
                $scope.sortingField = '';
                sortingDirection = 'ascending';
                statusFieldHeader = "Status";
                $scope.UidFieldHeader = 'Uid';
                $scope.menuItem = 'List';

                //configService.getConfiguration().then(function (config) {
                //    for (var i = 0; i < config.length; i++) {
                //        switch (config[i].key) {
                //            case 'Web_Archive_Default_Filter':
                //                $scope.queryDay = config[i].value;
                //                break;
                //            case 'Web_Archive_Time_Filters':
                //                $scope.queryDays = config[i].value.split(';');
                //                break;
                //            case 'Web_Archive_Default_Sorting':
                //                $scope.sortingField = config[i].value;
                //                break;
                //            case 'Web_Archive_List_Refresh_Time':
                //                intervalValue = parseInt(config[i].value) * 1000;
                //                if (intervalValue == 'NaN') { intervalValue = 120000; }
                //                break;
                //            default:
                //                break;
                //        }
                //    }
                //});
            });
        };

        $scope.getItems = function (day) {
            $scope.safeApply(function () {
                $scope.queryDay = day;
                $scope.items = sampleObjectArray.Items;
                $scope.itemsHeader = Object.keys($scope.items[0]);
                if ($scope.sortingField === "") {
                    $scope.sort($scope.items, dateFieldHeader);
                }
            });
        };

        $scope.filterByStatus = function (item) {
            if ($scope.selectedStatusList.length === 0) {
                return true;
            }
            for (var i = 0; i < $scope.selectedStatusList.length; i++) {
                if (item[statusFieldHeader] == $scope.selectedStatusList[i].name) {
                    return true;
                }
            }
            return false;
        };

        $scope.statusList = [
        { icon: "<img src=[..]/1.png.. />", name: "Unread", maker: "", ticked: false },
        { icon: "<img src=[..]/1.png.. />", name: "Done", maker: "", ticked: false },
        { icon: "<img src=[..]/1.png.. />", name: "Failed", maker: "", ticked: false },
        { icon: "<img src=[..]/1.png.. />", name: "Validated", maker: "", ticked: false }
        ];

        $scope.getSortDirectionClass = function (field) {
            var className = $scope.sortingField == field ? sortingDirection : '';
            return className;
        };

        // TODO: Move to utils service
        function sorting(item1, item2) {
            if (item1[$scope.sortingField] < item2[$scope.sortingField])
                return -1;
            if (item1[$scope.sortingField] > item2[$scope.sortingField])
                return 1;
            return 0;
        }

        $scope.sort = function (array, field) {
            if ($scope.sortingField === field) {
                sortingDirection = sortingDirection == 'ascending' ? 'decending' : 'ascending';
                array = array.reverse();
            }
            else {
                sortingDirection = 'ascending';
                $scope.sortingField = field;
                array = array.sort(sorting);
            }
        };

        $scope.filterFunction = function (element) {
            console.log("filterFunction");
            return element.name.match(/^Ma/) ? true : false;
        };

        getConfiguration();
        $scope.getItems();

        $scope.selectItem = function (selectedItem) {
            $scope.itemId = selectedItem[$scope.UidFieldHeader];
        };
    }]);
var mainModule = angular.module("mainModule");

mainModule.config(['$routeProvider',
  function ($routeProvider) {
      $routeProvider.
        when('/list', {
            templateUrl: '/app/views/list.html',
            controller: 'mainCtrl'
        }).
        otherwise({
            redirectTo: '/list'
        });
  }]);
var sampleObjectArray = {
    "Items":
    [
    { "Uid": "983632567885857", "Name": "Mr. MR", "Number": 11, "Date": 20140108, "Description": "CHEST", "Status": "Unread" },
    { "Uid": "248576534564783", "Name": "Mr. MR", "Number": 22, "Date": 20120108, "Description": "CHEST", "Status": "Validated" },
    { "Uid": "572464574865758", "Name": "Mr. MR", "Number": 33, "Date": 20140708, "Description": "CHEST", "Status": "Done" },
    { "Uid": "534254889256482", "Name": "Mr. MR", "Number": 44, "Date": 20140104, "Description": "CHEST", "Status": "Failed" },
    { "Uid": "456374286378434", "Name": "Mr. MR", "Number": 55, "Date": 20130115, "Description": "CHEST", "Status": "Unread" },
    { "Uid": "572453678963468", "Name": "Mr. MR", "Number": 66, "Date": 20130308, "Description": "CHEST", "Status": "Unread" },
    { "Uid": "852974208971589", "Name": "Mr. MR", "Number": 77, "Date": 20140130, "Description": "CHEST", "Status": "Done" },
    { "Uid": "498278946194755", "Name": "Mr. MR", "Number": 88, "Date": 20150102, "Description": "CHEST", "Status": "Failed" },
    { "Uid": "626729075893475", "Name": "Mr. MR", "Number": 99, "Date": 20150305, "Description": "CHEST", "Status": "Validated" }    
    ]
};